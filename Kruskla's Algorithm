#include <stdio.h>
#include <stdlib.h>

#define MAX_EDGES 100
#define MAX_VERTICES 100

typedef struct Edge {
    int src, dest, weight;
} Edge;

typedef struct Graph {
    int V, E;
    Edge edges[MAX_EDGES];
} Graph;

int findSet(int parent[], int i) {
    return parent[i] == i ? i : (parent[i] = findSet(parent, parent[i]));
}

void unionSet(int parent[], int rank[], int x, int y) {
    int rx = findSet(parent, x);
    int ry = findSet(parent, y);
    if (rank[rx] < rank[ry]) parent[rx] = ry;
    else if (rank[rx] > rank[ry]) parent[ry] = rx;
    else {
        parent[ry] = rx;
        rank[rx]++;
    }
}

int cmpEdge(const void *a, const void *b) {
    return ((Edge*)a)->weight - ((Edge*)b)->weight;
}

void kruskalMST(Graph *graph) {
    int V = graph->V;
    Edge result[MAX_VERTICES];
    int e = 0, i = 0;

    qsort(graph->edges, graph->E, sizeof(Edge), cmpEdge);

    int parent[V];
    int rank[V];
    for (int v = 0; v < V; v++) {
        parent[v] = v;
        rank[v] = 0;
    }

    while (e < V - 1 && i < graph->E) {
        Edge next = graph->edges[i++];
        int x = findSet(parent, next.src);
        int y = findSet(parent, next.dest);

        if (x != y) {
            result[e++] = next;
            unionSet(parent, rank, x, y);
        }
    }

    printf("Edge \tWeight\n");
    for (i = 0; i < e; i++)
        printf("%d - %d \t%d\n", result[i].src, result[i].dest, result[i].weight);
}

int main() {
    Graph graph;
    graph.V = 4;
    graph.E = 5;

    graph.edges[0] = (Edge){0, 1, 10};
    graph.edges[1] = (Edge){0, 2, 6};
    graph.edges[2] = (Edge){0, 3, 5};
    graph.edges[3] = (Edge){1, 3, 15};
    graph.edges[4] = (Edge){2, 3, 4};

    kruskalMST(&graph);
    return 0;
}
