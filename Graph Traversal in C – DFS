#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Node {
    int data;
    struct Node* next;
};

struct List {
    struct Node* head;
};

struct Graph {
    int vertices;
    struct List* array;
};

struct Node* createNode(int data) {
    struct Node* newNode = malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Graph* createGraph(int vertices) {
    struct Graph* graph = malloc(sizeof(struct Graph));
    graph->vertices = vertices;
    graph->array = malloc(vertices * sizeof(struct List));
    for (int i = 0; i < vertices; i++)
        graph->array[i].head = NULL;
    return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {
    struct Node* node = createNode(dest);
    node->next = graph->array[src].head;
    graph->array[src].head = node;
}

void DFS(struct Graph* graph, int v, bool visited[]) {
    visited[v] = true;
    printf("%d ", v);
    struct Node* temp = graph->array[v].head;
    while (temp) {
        if (!visited[temp->data])
            DFS(graph, temp->data, visited);
        temp = temp->next;
    }
}

int main() {
    int V = 4;
    struct Graph* graph = createGraph(V);
    addEdge(graph, 2, 0);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 0, 1);
    addEdge(graph, 3, 3);
    addEdge(graph, 1, 3);

    bool* visited = calloc(V, sizeof(bool));
    printf("DFS from vertex 2: ");
    DFS(graph, 2, visited);
    printf("\n");

    free(visited);
    return 0;
}
