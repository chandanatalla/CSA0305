#include <stdio.h>
#include <conio.h>

int s, c[100][100], ver;
float optimum = 999, sum;

void swap(int v[], int i, int j) {
    int t = v[i];
    v[i] = v[j];
    v[j] = t;
}

void brute_force(int v[], int n, int i) {
    int j, sum1, k;
    if (i == n) {
        if (v[0] == s) {
            sum1 = 0;
            for (k = 0; k < n - 1; k++) {
                sum1 += c[v[k]][v[k + 1]];
            }
            sum1 += c[v[n - 1]][s];
            if (sum1 < optimum) optimum = sum1;
        }
    } else {
        for (j = i; j < n; j++) {
            swap(v, i, j);
            brute_force(v, n, i + 1);
            swap(v, i, j);
        }
    }
}

void nearest_neighbour(int ver) {
    int min, p, i, j, vis[20], from;
    for (i = 1; i <= ver; i++) vis[i] = 0;
    vis[s] = 1;
    from = s;
    sum = 0;
    for (j = 1; j < ver; j++) {
        min = 999;
        for (i = 1; i <= ver; i++) {
            if (!vis[i] && c[from][i] < min && c[from][i] != 0) {
                min = c[from][i];
                p = i;
            }
        }
        vis[p] = 1;
        from = p;
        sum += min;
    }
    sum += c[from][s];
}

int main() {
    int v[100], i;
    printf("Enter number of vertices: ");
    scanf("%d", &ver);
    for (i = 0; i < ver; i++) v[i] = i + 1;
    printf("Enter cost matrix:\n");
    for (i = 1; i <= ver; i++)
        for (int j = 1; j <= ver; j++)
            scanf("%d", &c[i][j]);
    printf("Enter source: ");
    scanf("%d", &s);

    brute_force(v, ver, 0);
    printf("Optimum (Brute Force): %f\n", optimum);

    nearest_neighbour(ver);
    printf("Nearest Neighbour Approximation: %f\n", sum);
    getch();
    return 0;
}
